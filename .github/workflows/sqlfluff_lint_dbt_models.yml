name: SQLFluff

on: # yamllint disable-line rule:truthy
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - master

jobs:
  lint-models:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest']
        python-version: [3.8]
    env: 
      DBT_PROFILES_DIR: ${{ github.workspace }}/.ci_cd
      PROFILES_YML_HOST: ${{ secrets.PROFILES_YML_HOST }}
      PROFILES_YML_HTTP_PATH: ${{ secrets.PROFILES_YML_HTTP_PATH }}
      PROFILES_YML_TOKEN: ${{ secrets.PROFILES_YML_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      #- name: Install dbt
      #  run: "pip install dbt-core==1.4.5"
      #- name: Install dbt databricks adaptor
      #  run: "pip install dbt-databricks==1.4.2"
      - name: SQLFluff lint models/ and apply fixes
        # https://github.com/yu-iskw/action-sqlfluff
        #uses: yu-iskw/action-sqlfluff@a28280f53bbb888a7a1c8d560c01b32b97269198
        uses: yu-iskw/action-sqlfluff@v3
        id: lint-sql
        with:
          # config: ".github/workflows/additional_cfg.sqlfluff"
          config: "${{ github.workspace }}/.github/workflows/additional_cfg.sqlfluff"
          extra_requirements: "${{ github.workspace }}/.github/workflows/extra_requirements.txt"
          fail_on_error: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # paths: "dbt_transform/models"
          paths: "${{ github.workspace }}/models"
          reporter: github-pr-review
          sqlfluff_version: "1.4.5"
          sqlfluff_command: "fix" # Or "lint"
          # working-directory: "udemy-data-warehouse/dbt_transform"
          working-directory: "${{ github.workspace }}"
      - name: "Show outputs (Optional)" # Only works in "lint" mode
        shell: bash
        run: |
          echo '${{ steps.lint-sql.outputs.sqlfluff-results }}' | jq -r '.'
          echo '${{ steps.lint-sql.outputs.sqlfluff-results-rdjson }}' | jq -r '.'
  # lint-macros:
  #   runs-on: [udemy-runner]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: SQLFluff lint macros/ and apply fixes
  #       # https://github.com/yu-iskw/action-sqlfluff
  #       uses: yu-iskw/action-sqlfluff@a28280f53bbb888a7a1c8d560c01b32b97269198
  #       id: lint-sql
  #       with:
  #         config: ".github/workflows/additional_cfg.sqlfluff"
  #         fail_on_error: true
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         paths: "dbt_transform/macros"
  #         reporter: github-pr-review
  #         sqlfluff_version: "1.4.5"
  #         sqlfluff_command: "fix" # Or "lint"
  #         working-directory: "udemy-data-warehouse/dbt_transform"
  #     - name: "Show outputs (Optional)" # Only works in "lint" mode
  #       shell: bash
  #       run: |
  #         echo '${{ steps.lint-sql.outputs.sqlfluff-results }}' | jq -r '.'
  #         echo '${{ steps.lint-sql.outputs.sqlfluff-results-rdjson }}' | jq -r '.'
  # lint-snapshots:
  #   runs-on: [udemy-runner]
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: SQLFluff lint raw_snapshots/ and apply fixes
  #       # https://github.com/yu-iskw/action-sqlfluff
  #       uses: yu-iskw/action-sqlfluff@a28280f53bbb888a7a1c8d560c01b32b97269198
  #       id: lint-sql
  #       with:
  #         config: ".github/workflows/additional_cfg.sqlfluff"
  #         fail_on_error: true
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         paths: "dbt_transform/raw_snapshots"
  #         reporter: github-pr-review
  #         sqlfluff_version: "1.4.5"
  #         sqlfluff_command: "fix" # Or "lint"
  #         working-directory: "udemy-data-warehouse/dbt_transform"
  #     - name: "Show outputs (Optional)" # Only works in "lint" mode
  #       shell: bash
  #       run: |
  #         echo '${{ steps.lint-sql.outputs.sqlfluff-results }}' | jq -r '.'
  #         echo '${{ steps.lint-sql.outputs.sqlfluff-results-rdjson }}' | jq -r '.'



# name: SQLFluff lint dbt data models

# on:
#   pull_request:
#     branches:
#     - master

# jobs:
#   sqlfluff-lint-models:
#     name: Lint dbt models using SQLFluff
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         os: ['ubuntu-latest']
#         python-version: [3.8]
#     # Set environment variables used throughout workflow
#     env:
#       #DBT_PROFILES_DIR: /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/.ci_cd
#       DBT_PROFILES_DIR: ${{ github.workspace }}/.ci_cd

#       # SPECIFY database connection credentials as env vars below.
#       # Env var values to be fetched from as GitHub Secrets.
#       # HIGHLY recommended you use a unique set of connection credentials for this worklfow alone.

#       # IF USING REDSHIFT, workflow will use these in dummy profiles.yml (else, ignored)
#       PROFILES_YML_HOST: ${{ secrets.PROFILES_YML_HOST }}
#       PROFILES_YML_HTTP_PATH: ${{ secrets.PROFILES_YML_HTTP_PATH }}
#       PROFILES_YML_TOKEN: ${{ secrets.PROFILES_YML_TOKEN }}

#       # IF USING OTHER DATABASE (e.g. BigQuery, Postgres, Presto, etc.)
#       # 1. You will have to modify your dummy `profiles.yml` to match the format found in your local `profiles.yml`, typically found at `~/.dbt/profiles.yml`. Or see dbt [docs](https://docs.getdbt.com/reference/profiles.yml#!).
#       # 2. Then set the connection credentials a environment variables in your `sqlfluff_lint_dbt_models.yml`.
#       # 3. Store the environment variables values as GitHub Secrets in your repo.
     
#     # steps:
#     #   - uses: actions/checkout@v3
#     #   - name: Install dbt
#     #     run: "pip install dbt-core==1.4.5"
#     #   - name: Install dbt databricks adapter
#     #     run: "pip install dbt-databricks==1.4.2"
#     #   - name: SQLFluff lint models/ and apply fixes
#     #     # https://github.com/yu-iskw/action-sqlfluff
#     #     uses: yu-iskw/action-sqlfluff@a28280f53bbb888a7a1c8d560c01b32b97269198
#     #     id: lint-sql
#     #     with:
#     #       # config: ".github/workflows/additional_cfg.sqlfluff"
#     #       config: "${{ github.workspace }}/.sqlfluff"
#     #       fail_on_error: true
#     #       github_token: ${{ secrets.GITHUB_TOKEN }}
#     #       # paths: "dbt_transform/models"
#     #       paths: "${{ github.workspace }}/models"
#     #       reporter: github-pr-review
#     #       sqlfluff_version: "1.4.5"
#     #       sqlfluff_command: "fix" # Or "lint"
#     #       # working-directory: "udemy-data-warehouse/dbt_transform"
#     #       working-directory: "${{ github.workspace }}"
#     #   - name: "Show outputs (Optional)" # Only works in "lint" mode
#     #     shell: bash
#     #     run: |
#     #       echo '${{ steps.lint-sql.outputs.sqlfluff-results }}' | jq -r '.'
#     #       echo '${{ steps.lint-sql.outputs.sqlfluff-results-rdjson }}' | jq -r '.'

#     steps:
#       - name: Checkout branch
#         uses: actions/checkout@v2

#       - name: Setup Python 3.9
#         uses: actions/setup-python@v2
#         with:
#           python-version: 3.9
      
#       - name: Install Dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install dbt-core==1.4.5
#           pip install dbt-databricks==1.4.2
#           pip install sqlfluff==1.4.2
#           pip install sqlfluff-templater-dbt

#         # uses: conda-incubator/setup-miniconda@v2
#         # with:
#         #   activate-environment: dbt-sqlfluff-env
#         #   python-version: ${{ matrix.python-version }}
#         #   auto-update-conda: true
#         #   auto-activate-base: false
#         #   environment-file: environment.yml
#         #   show-channel-urls: true
#           # use-only-tar-bz2: true

#       - name: Get changed files
#         id: get_file_changes
#         uses: trilom/file-changes-action@v1.2.4
#         with:
#           output: ' '

#       - name: Get new and changed .sql files in /models to lint
#         id: get_files_to_lint
#         shell: bash -l {0}
#         run: |
#           # Set the command in the $() brackets as an output to use in later steps
#           echo "::set-output name=lintees::$(
#           # Issue where grep regular expressions don't work as expected on the
#           # Github Actions shell, check dbt/models/ folder
#           echo \
#           $(echo ${{ steps.get_file_changes.outputs.files_modified }} |
#           tr -s ' ' '\n' |
#           grep -E '^models.*[.]sql$' |
#           tr -s '\n' ' ') \
#           $(echo ${{ steps.get_file_changes.outputs.files_added }} |
#           tr -s ' ' '\n' |
#           grep -E '^models.*[.]sql$' |
#           tr -s '\n' ' ')
#           )"

#       # ---- USEFUL FOR DEBUGGING profiles.yml and VPN config ----
#       # - name: Expose workflow directory structure and CI/CD files
#       #   # Show folder structue and that required files are present.
#       #   # Mainly for sanity/debugging.
#       #   run: |
#       #     echo "Home directory (~):"
#       #     echo ~
#       #     echo " "
#       #     echo "Present working directory:"
#       #     pwd
#       #     echo " "
#       #     echo "Present working directory contents:"
#       #     ls -lh
#       #     echo " "
#       #     echo "Check /ci_cd folder contents for dummy profiles.yml and VPN config:"
#       #     ls -lh ci_cd

#       # ---- USEFUL FOR DEBUGGING CONNECTION ISSUES ----
#       # - name: Check dbt can connect to data warehouse and compile on its own.
#       #   # Call dbt separately here to try and catch a more verbose version of
#       #   # errors related to connection and profiles.yml issues since SQLFluff
#       #   # returns very unclear errors when this occurs.
#       #   shell: bash -l {0}
#       #   run : |
      
#       - name: Install dbt deps
#         if: steps.get_files_to_lint.outputs.lintees != ''
#         shell: bash -l {0}
#         run: |
#           dbt deps

#       # - name: Lint dbt models
#       #   if: steps.get_files_to_lint.outputs.lintees != ''
#       #   shell: bash -l {0}
#       #   run: sqlfluff lint --format github-annotation --annotation-level failure --nofail ${{ steps.get_files_to_lint.outputs.lintees }} | grep -o '\[{.*' > annotations.json

#       # - name: Annotate
#       #   uses: yuzutech/annotations-action@v0.3.0
#       #   with:
#       #     repo-token: "${{ secrets.GITHUB_TOKEN }}"
#       #     title: "SQLFluff Lint"
#       #     input: "./annotations.json"
      
#       - name: Fix
#         if: steps.get_files_to_lint.outputs.lintees != ''
#         shell: bash -l {0}
#         run: sqlfluff fix -f ${{ steps.get_files_to_lint.outputs.lintees }}